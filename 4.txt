complexity
알고리즘의 성능을 계산하는 알고리즘
- 계산 복잡도. 알고리즘을 효율을 연구하는 프레임웍

-머신 모델 
Upper bound : 문제를 해결하기 위해서 최대의 코스트
Lower bound : 문제를 해결하기 위해선 하한
옵티말 알고리즘 : 업퍼와 로우어의 사이

소팅
머신 모델 : 비교 횟수 
어퍼바운드 : N logN (머지소트)
로우어바운드 : ??

로우어 바운드 : 트리의 구조가 균형될 때 높이를 최소화 할 수 있음. 높이와 같거나 하나 더 적은 회수일것

로우어 바운드 정의 1.44N보다 커진다

머신 모델 : 비교 횟수 
어퍼바운드 : N logN (머지소트)
로우어바운드 : NlogN - 1.44N

다른 요소
퀵소트는 머지소트보다 다른 연산이 더 적기 때문에 더 빠르다.
머지소트는 메모리 사용에서 최적화 되어있지 않음
인설션, 셀렉션, 쉘, 퀵소트는 공간 최적화되어 있다.


Selection
K번째로 큰 수를 찾는 일

응용분야
-통계분야

방법
-가장 간단한 방법 : 소팅하고, 결과 어레이에서 K번쨰 봅아낸다. NlogN
-K가 min, max일떄 N번

Selection도 소팅만큼 어려운 문제이다.


but
-key값 미리 알고 있다거나, 들어간 순서를 미리 알고 있다면 빠르게 찾을 수 있다.
부분적으로 정렬되어 있다면, NlogN만큼 필요하지 않다.

-duplicate keys

-숫자나 문자나를 통째로 비교하는 게 아닌 각 자리를 비교하는 방법


Selection : quick-select Algorithm
Partion 함수 사용

	public static void selcet(Comparable[] a, int k) {
		StdRandom.shuffle(a);
		int l = 0;
		int r = a.length - 1;
		while(r > 1) {
			int m = partition(a, l, r);
			if 		(m > k) r = m - 1;
			else if (m < k) l = m + 1;
			else return;
		}
	}

Qucik-select : linear time으로 가능
N + N/2 + N/4 + ... + 1 = 2N


System sorts

문제 : key의 크기는 작은데, 거대한 레코드 함수를 소팅하는 경우
1.merge sort 적당하지 않음 : 이동하는 횟수가 많음
2.insertion sort 
3.selection sort : insertion sort보다 맞교환 횟수가 적다.
셀렉션 소트가 맞교환할 때 더 유리하다.

문제 : 레코드 각각은 매우 작은데, 거대한 레코드
1. 퀵소트 : 퀵 소트가 가장 빠르다. 
2. 인서션 소트
3. 셀렉션 

문제 : 레코드 갯수가 적은 경우가 매우 많은 경우
1. 퀵소트
2. 인서션 소트 : 
3. 셀렉션 소트 : 인서션이나 셀렉션이 퀵 소트나 머지보다 났다. 퀵소트는 머지는 클때만 유리하다.

문제 : 파일의 크기는 매우큰데, 데이터들에 대부분 정렬이 되어 있다.
1. 퀵소트
2. 인서션 소트 : 이미 정렬되어 있는 경우 매우 유리하다.
3. 셀렉션 소트

어떤 알고리즘을 활용할 수 있을까?
인터널 소트
익스터널 소트 : 메인 메모리말고 하드 드라이버를 소팅 할 때 사용
래딕스 소트 : 키를 전체를 비교하는 게 아니라 글자 한자, 한 자리수 별로 분류하는 방법
패러렐 소트 :

시스템 소트를 선택할 때 어던 속성들을 검토해야하는가?
stable?
multiple keys?
deterministic?
ket all distinct?
multiple key typles?
linked list or arrays?
large or small records?
is your file randomly ordered?
need guaranteed performance?



duplicate keys 같은 키가 여러게 들어있을때

예를들어서 나이로 정렬할때

파일이 크고,
종류의 수가 적다

3-way partitioning


comparators
java에서는 Comparable interface 안에 있음

문제 1. 타입에 인한 오류 발생
2. 정렬순서 바꿀 수 없음
3. 정해진 순서가 없는 데이터 타입도 있다.

데이터 타입에 방지 오류

1.
public class Insertion {
	public static <Key extends Comparable<Key>>void sort(Key[] a)

}

Comparator 타입을 특정 오브젝트 타입으로 확장한 것을 임프리 멘트한 클래스를 정의하고 그곳 안에 compare 함수를 정의한다.

public class ReverseOrder impements Comparator<String>
{
	public int compare(String a, String b) {
		return - a.comparTo(b);
	}
}

Arrays.sort(a, new ReversOrder()); //ReversOrder라는 함수를 확장해서 사용된다.


